{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","services/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/user.ts","services/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","handlePostSelected","className","map","post","isSelected","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","addNewComment","handleSetError","useState","name","email","comment","newComment","setNewComment","isLoading","setIsLoading","hasInputError","setHasInputError","handleReset","onSubmit","event","preventDefault","commentToAdd","postId","newCommentFromServer","catch","finally","onReset","htmlFor","placeholder","value","onChange","prevState","prevComment","target","PostDetails","comments","setComments","isCommentsError","setIsCommentsError","isFormOpen","setIsFormOpen","loadCommentsFromServer","useEffect","handleDeleteComment","deleteComment","currentComments","filter","curr","length","href","UserSelector","users","handleUserSelect","selectedUser","isUsersVisible","setIsUsersVisible","closeOnOutsideClick","closest","document","addEventListener","removeEventListener","visibility","role","user","handleUserClick","App","setUsers","setSelectedUser","setPosts","setSelectedPost","loadingPosts","setLoadingPosts","loadingPostsError","setLoadingPostsError","getPostsFromServer","selected","userId","postr","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.acffc9bf.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  selectedPost: Post | null;\n  handlePostSelected: (postr: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  handlePostSelected,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => {\n          const isSelected = selectedPost?.id === post.id;\n          const onSelected = () => {\n            if (isSelected) {\n              handlePostSelected(null);\n            } else {\n              handlePostSelected(post);\n            }\n          };\n\n          return (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': !isSelected },\n                  )}\n                  onClick={onSelected}\n                >\n                  {isSelected\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../services/comments';\n\ntype Props = {\n  selectedPost: Post | null;\n  addNewComment: (newComment: Comment) => void;\n  handleSetError: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  addNewComment,\n  handleSetError,\n}) => {\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    comment: '',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasInputError, setHasInputError] = useState({\n    name: '',\n    email: '',\n    comment: '',\n  });\n\n  const handleReset = () => {\n    setNewComment({ name: '', email: '', comment: '' });\n    setHasInputError({ name: '', email: '', comment: '' });\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasInputError((prevState) => ({ ...prevState, name: '' }));\n    setNewComment((prevComment) => (\n      { ...prevComment, name: event.target.value }));\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasInputError((prevState) => ({ ...prevState, email: '' }));\n    setNewComment((prevComment) => (\n      { ...prevComment, email: event.target.value }));\n  };\n\n  const handleCommentChange\n  = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setHasInputError((prevState) => ({ ...prevState, comment: '' }));\n    setNewComment((prevComment) => (\n      { ...prevComment, comment: event.target.value }));\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setHasInputError({\n      name: !newComment.name ? 'Name is required' : '',\n      email: !newComment.email ? 'Email is required' : '',\n      comment: !newComment.comment ? 'Enter some text' : '',\n    });\n\n    if (!newComment.name || !newComment.email || !newComment.comment) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    if (selectedPost) {\n      const commentToAdd: Omit<Comment, 'id'> = {\n        postId: selectedPost.id,\n        name: newComment.name,\n        email: newComment.email,\n        body: newComment.comment,\n      };\n\n      addComment(commentToAdd)\n        .then((newCommentFromServer) => {\n          addNewComment(newCommentFromServer);\n          setNewComment({ name: '', email: '', comment: '' });\n        })\n        .catch(() => handleSetError())\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasInputError.name },\n            )}\n            value={newComment.name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasInputError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasInputError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={newComment.email}\n            className={classNames(\n              'input',\n              { 'is-danger': hasInputError.email },\n            )}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasInputError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {hasInputError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': hasInputError.comment },\n            )}\n            value={newComment.comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {hasInputError.comment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  data: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../services/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentsError, setIsCommentsError] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const handleSetError = () => {\n    setIsCommentsError(true);\n  };\n\n  const loadCommentsFromServer = (post: Post) => {\n    setIsLoading(true);\n\n    getComments(post.id)\n      .then(() => setComments)\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsCommentsError(false);\n      setComments([]);\n      loadCommentsFromServer(selectedPost);\n    }\n  }, [selectedPost]);\n\n  const addNewComment = (newComment: Comment) => {\n    setComments(currentComments => [...currentComments, newComment]);\n  };\n\n  const handleDeleteComment = (id: number) => {\n    deleteComment(id)\n      .then(() => setComments(currentComments => currentComments\n        .filter(comment => comment.id !== id)))\n      .catch(() => setIsCommentsError(curr => curr));\n  };\n\n  if (!selectedPost) {\n    return null;\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length !== 0 && !isLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormOpen(true)}\n          >\n            Write a comment\n          </button>\n        </div>\n\n        {isFormOpen && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            addNewComment={addNewComment}\n            handleSetError={handleSetError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  handleUserSelect: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  handleUserSelect,\n  selectedUser,\n}) => {\n  const [isUsersVisible, setIsUsersVisible] = useState(false);\n\n  const toggleUserVisibility = () => {\n    setIsUsersVisible((visibility) => !visibility);\n  };\n\n  const handleUserClick = (user: User) => {\n    handleUserSelect(user);\n    setIsUsersVisible(false);\n  };\n\n  const closeDropdown = () => {\n    setIsUsersVisible(false);\n  };\n\n  useEffect(() => {\n    const closeOnOutsideClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n\n      if (!target.closest('.dropdown')) {\n        closeDropdown();\n      }\n    };\n\n    document.addEventListener('mousedown', closeOnOutsideClick);\n\n    return () => {\n      document.removeEventListener('mousedown', closeOnOutsideClick);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown',\n        { 'is-active': isUsersVisible })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleUserVisibility}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleUserClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './services/user';\nimport { Loader } from './components/Loader';\nimport { getPosts } from './services/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [loadingPostsError, setLoadingPostsError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setLoadingPostsError(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoadingPosts(true);\n      setPosts([]);\n      setLoadingPosts(false);\n    }\n  }, [selectedUser]);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n  };\n\n  const handlePostSelected = (postr: Post | null) => {\n    setSelectedPost(postr);\n  };\n\n  const getPostsFromServer = (selected: User | null) => {\n    if (!selected) {\n      return;\n    }\n\n    setSelectedPost(null);\n    setLoadingPosts(true);\n\n    getPosts(selected.id)\n      .then(setPosts)\n      .catch(() => setLoadingPostsError(true))\n      .finally(() => setLoadingPosts(false));\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoadingPostsError(false);\n      getPostsFromServer(selectedUser);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleUserSelect={handleUserSelect}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {loadingPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!selectedUser ? (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                ) : (\n                  <>\n                    {loadingPosts && <Loader />}\n                    {!loadingPosts && posts && posts.length === 0 && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                    {!loadingPosts && posts && posts.length > 0 && (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        handlePostSelected={handlePostSelected}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                {selectedPost && <PostDetails selectedPost={selectedPost} />}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}